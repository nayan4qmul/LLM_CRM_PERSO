Query:
I'd like to know the top emerging trends in product categories based on recent transactions within the last 30 days. Can you provide me with the top 3 product categories with the highest purchase counts?

Context:

You are a Python function generator. Users will ask you questions in English, 
and you will produce a Python function as answer to the question based on the provided CONTEXT.

CONTEXT:
Pandas DataFrame df containing transaction data with columns order_id, user_id, item_id, timestamp, score.
order_id takes string datatype and identifies the order.
user_id takes string datatype and identifies the customer.
item_id takes string datatype that identifies the product.
timestamp takes timestamp datatype and represents the datetimestamp of transaction.
score takes float datatype and represents the score of the transaction.
Note that a customer can make multiple transactions for a product but the customer product pair will be just one entry for each order.
Pandas DataFrame product_dfcontaining product data with columns item_id, product_category.
item_id takes string datatype that identifies the product.
product_category takes string datatype and represents the product category in the product hierarchy.
Note that df can be joined with product_df on item_id.


Original Answer:
def emerging_trends(df, product_df, time_window='30D', top_n=3):
    df = df.merge(product_df, on='item_id')
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    start_date = df['timestamp'].max() - pd.to_timedelta(time_window)
    recent_transactions = df[df['timestamp'] >= start_date]
    trend_categories = recent_transactions['product_category'].value_counts().head(top_n).reset_index()
    trend_categories.columns = ['product_category', 'purchase_count']
    return trend_categories


Generated Answer:
[INST]

You are a Python function generator. Users will ask you questions in English, and you will produce a Python function as an answer to the question.

CONTEXT:
Pandas DataFrame df containing transaction data with columns order_id, user_id, item_id, timestamp, score.
order_id takes string datatype and identifies the order.
user_id takes string datatype and identifies the customer.
item_id takes string datatype that identifies the product.
timestamp takes timestamp datatype and represents the datetimestamp of transaction.
score takes float datatype and represents the score of the transaction.
Note that a customer can make multiple transactions for a product but the customer product pair will be just one entry for each order.
Pandas DataFrame product_df containing product data with columns item_id, product_category.
item_id takes string datatype that identifies the product.
product_category takes string datatype and represents the product category in the product hierarchy.
Note that df can be joined with product_df on item_id.

<</INST>

Iâ€™d like to know the top emerging trends in product categories based on recent transactions within the last 30 days. Can you provide me with the top 3 product categories with the highest purchase counts? [/INST]

[OUT]

def top_emerging_trends(df, product_df, product_category_column, time_period):
    # Join the transaction data with the product data
    df_joined = pd.merge(df, product_df, on='item_id')

    # Filter out transactions within the given time period
    df_filtered = df_joined[df_joined['timestamp'] >= time_period].groupby('item_id')['timestamp'].count()

    # Create a dictionary of product categories with purchase counts
    product_categories = df_filtered.groupby(product_df[product_category_column].rename('product_category')).agg({'timestamp': 'count'}).to_dict()

    # Sort the dictionary by purchase counts in descending order
    sorted_categories = {k: v for k, v in sorted(product_categories.items(), key=lambda x: x[1], reverse=True)}

    # Return the top 3 product categories with the highest purchase counts
    return sorted_categories['product_category'][:3]


# Count distinct number of users
def count_distinct_users(df=df):
    return df['user_id'].nunique()

# Count distinct number of items
def count_distinct_items(df=df):
    return df['product_id'].nunique()

# Top x recommended items
def top_x_recommended_items(df=df, topk=x):
    return df.groupby('product_id').sort_values('score', ascending=False).head(topk)

# Top x recommended items by user
def top_x_recommended_items_for_user(df=df, topk=x, user_id=username):
    return df[df['user_id'] == username].sort_values('score', ascending=False).head(topk)

# Top x recommended users
def top_x_recommended_users(df=df, topk=x):
    return df.groupby('user_id').sort_values('score', ascending=False).head(topk)

# Top x recommended users by item
def top_x_recommended_users_for_item(df=df, topk=x, item_id=itemname):
    return df[df['product_id'] == item_id].sort_values('score', ascending=False).head(topk)

# Recommended items with score greater than or equal to threshold
def recommended_items_with_score_greater_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] >= threshold]['product_id'].unique()

# Recommended users with score greater than or equal to threshold
def recommended_users_with_score_greater_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] >= threshold]['user_id'].unique()

# user item interaction
def user_item_interaction(df=df, user_id=username, item_id=itemname):
    return df[(df['user_id'] == user_id) & (df['product_id'] == item_id)]

# Top y worst performing items
def top_y_worst_performing_items(df=df, topk=y):
    return df.groupby('product_id').sort_values('score', ascending=True).head(topk)

# Top y worst performing items by user
def top_y_worst_performing_items_for_user(df=df, topk=y, user_id=username):
    return df[df['user_id'] == username].sort_values('score', ascending=True).head(topk)

# Top y worst performing users
def top_y_worst_performing_users(df=df, topk=y):
    return df.groupby('user_id').sort_values('score', ascending=True).head(topk)

# Top y worst performing users by item
def top_y_worst_performing_users_for_item(df=df, topk=y, item_id=itemname):
    return df[df['product_id'] == item_id].sort_values('score', ascending=True).head(topk)

# Worst performing items with score less than or equal to threshold
def worst_performing_items_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold]['product_id'].unique()

# Worst performing users with score less than or equal to threshold
def worst_performing_users_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold]['user_id'].unique()

# Highest scored user item interaction
def top_scored_user_item_interaction(df=df):
    return df[df['score'] == df['score'].max()]

# Lowest scored user item interaction
def lowest_scored_user_item_interaction(df=df):
    return df[df['score'] == df['score'].min()]

# nth highest scored user item interaction
def nth_highest_scored_user_item_interaction(df=df, nth=n):
    return df[df['score'] == df['score'].nlargest(nth).iloc[-1]]

# nth lowest scored user item interaction
def nth_lowest_scored_user_item_interaction(df=df, nth=n):
    return df[df['score'] == df['score'].nsmallest(nth).iloc[-1]]

# Count rows
def count_rows(df=df):
    return df.shape[0]

# nth highest scored user by item
def nth_highest_scored_user_by_item(df=df, nth=n, item_id=itemname):
    return df[df['product_id'] == item_id].sort_values('score', ascending=False).iloc[nth-1]

# nth lowest scored user by item
def nth_lowest_scored_user_by_item(df=df, nth=n, item_id=itemname):
    return df[df['product_id'] == item_id].sort_values('score', ascending=True).iloc[nth-1]

# nth highest scored item by user
def nth_highest_scored_item_by_user(df=df, nth=n, user_id=username):
    return df[df['user_id'] == user_id].sort_values('score', ascending=False).iloc[nth-1]

# nth lowest scored item by user
def nth_lowest_scored_item_by_user(df=df, nth=n, user_id=username):
    return df[df['user_id'] == user_id].sort_values('score', ascending=True).iloc[nth-1]

# Count of score of user
def count_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == username]['score'].count()

# Count of score of item
def count_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].count()

# Customers who bought product x also bought product y
def customers_who_bought_product_x_also_bought_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['user_id'], df[df['product_id'] == product_y]['user_id']], axis=1, join='inner')

# Customers who bought product x but not product y
def customers_who_bought_product_x_but_not_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['user_id'], df[df['product_id'] != product_y]['user_id']], axis=1, join='inner')

# Items bought by user x and also by user y
def items_bought_by_user_x_and_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['product_id'], df[df['user_id'] == user_y]['product_id']], axis=1, join='inner')

# Items bought by user x but not by user y
def items_bought_by_user_x_but_not_by_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['product_id'], df[df['user_id'] != user_y]['product_id']], axis=1, join='inner')

# Score for customers who bought product x and also bought product y
def score_for_customers_who_bought_product_x_and_also_bought_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['score'], df[df['product_id'] == product_y]['score']], axis=1, join='inner').sum(axis=1)

# Score for customers who bought product x but not product y
def score_for_customers_who_bought_product_x_but_not_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['score'], df[df['product_id'] != product_y]['score']], axis=1, join='inner').sum(axis=1)

# Score for items bought by user x and also by user y
def score_for_items_bought_by_user_x_and_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['score'], df[df['user_id'] == user_y]['score']], axis=1, join='inner').sum(axis=1)

# Score for items bought by user x but not by user y
def score_for_items_bought_by_user_x_but_not_by_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['score'], df[df['user_id'] != user_y]['score']], axis=1, join='inner').sum(axis=1)

# Mean score for customers who bought product x and also bought product y
def mean_score_for_customers_who_bought_product_x_and_also_bought_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['score'], df[df['product_id'] == product_y]['score']], axis=1, join='inner').mean(axis=1)

# Mean score for customers who bought product x but not product y
def mean_score_for_customers_who_bought_product_x_but_not_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['score'], df[df['product_id'] != product_y]['score']], axis=1, join='inner').mean(axis=1)

# Mean score for items bought by user x and also by user y
def mean_score_for_items_bought_by_user_x_and_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['score'], df[df['user_id'] == user_y]['score']], axis=1, join='inner').mean(axis=1)

# Mean score for items bought by user x but not by user y
def mean_score_for_items_bought_by_user_x_but_not_by_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['score'], df[df['user_id'] != user_y]['score']], axis=1, join='inner').mean(axis=1)

# Median score for customers who bought product x and also bought product y
def median_score_for_customers_who_bought_product_x_and_also_bought_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['score'], df[df['product_id'] == product_y]['score']], axis=1, join='inner').median(axis=1)

# Median score for customers who bought product x but not product y
def median_score_for_customers_who_bought_product_x_but_not_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['score'], df[df['product_id'] != product_y]['score']], axis=1, join='inner').median(axis=1)

# Median score for items bought by user x and also by user y
def median_score_for_items_bought_by_user_x_and_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['score'], df[df['user_id'] == user_y]['score']], axis=1, join='inner').median(axis=1)

# Median score for items bought by user x but not by user y
def median_score_for_items_bought_by_user_x_but_not_by_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['score'], df[df['user_id'] != user_y]['score']], axis=1, join='inner').median(axis=1)

# Mode score for customers who bought product x and also bought product y
def mode_score_for_customers_who_bought_product_x_and_also_bought_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['score'], df[df['product_id'] == product_y]['score']], axis=1, join='inner').mode(axis=1)

# Mode score for customers who bought product x but not product y
def mode_score_for_customers_who_bought_product_x_but_not_product_y(df=df, product_x=productx, product_y=producty):
    return pd.concat([df[df['product_id'] == product_x]['score'], df[df['product_id'] != product_y]['score']], axis=1, join='inner').mode(axis=1)

# Mode score for items bought by user x and also by user y
def mode_score_for_items_bought_by_user_x_and_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['score'], df[df['user_id'] == user_y]['score']], axis=1, join='inner').mode(axis=1)

# Mode score for items bought by user x but not by user y
def mode_score_for_items_bought_by_user_x_but_not_by_user_y(df=df, user_x=userx, user_y=usery):
    return pd.concat([df[df['user_id'] == user_x]['score'], df[df['user_id'] != user_y]['score']], axis=1, join='inner').mode(axis=1)

# mean score of user
def mean_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].mean()

# mean score of item
def mean_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].mean()

# mean score of all users
def mean_score_of_all_users(df=df):
    return df['score'].mean()

# mean score of all items
def mean_score_of_all_items(df=df):
    return df['score'].mean()

# median score of user
def median_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].median()

# median score of item
def median_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].median()

# median score of all users
def median_score_of_all_users(df=df):
    return df['score'].median()

# median score of all items
def median_score_of_all_items(df=df):
    return df['score'].median()

# mode score of user
def mode_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].mode()

# mode score of item
def mode_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].mode()

# mode score of all users
def mode_score_of_all_users(df=df):
    return df['score'].mode()

# mode score of all items
def mode_score_of_all_items(df=df):
    return df['score'].mode()

# standard deviation of score of user
def std_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].std()

# standard deviation of score of item
def std_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].std()

# standard deviation of score of all users
def std_score_of_all_users(df=df):
    return df['score'].std()

# standard deviation of score of all items
def std_score_of_all_items(df=df):
    return df['score'].std()

# variance of score of user
def var_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].var()

# variance of score of item
def var_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].var()

# variance of score of all users
def var_score_of_all_users(df=df):
    return df['score'].var()

# variance of score of all items
def var_score_of_all_items(df=df):
    return df['score'].var()

# skewness of score of user
def skew_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].skew()

# skewness of score of item
def skew_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].skew()

# skewness of score of all users
def skew_score_of_all_users(df=df):
    return df['score'].skew()

# skewness of score of all items
def skew_score_of_all_items(df=df):
    return df['score'].skew()

# kurtosis of score of user
def kurt_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].kurt()

# kurtosis of score of item
def kurt_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].kurt()

# kurtosis of score of all users
def kurt_score_of_all_users(df=df):
    return df['score'].kurt()

# kurtosis of score of all items
def kurt_score_of_all_items(df=df):
    return df['score'].kurt()

# correlation of score of user
def corr_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].corr()

# correlation of score of item
def corr_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].corr()

# correlation of score of all users
def corr_score_of_all_users(df=df):
    return df['score'].corr()

# correlation of score of all items
def corr_score_of_all_items(df=df):
    return df['score'].corr()

# covariance of score of user
def cov_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].cov()

# covariance of score of item
def cov_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].cov()

# covariance of score of all users
def cov_score_of_all_users(df=df):
    return df['score'].cov()

# covariance of score of all items
def cov_score_of_all_items(df=df):
    return df['score'].cov()

# percentile of score of user
def percentile_score_of_user(df=df, user_id=username, percentile=p):
    return df[df['user_id'] == user_id]['score'].quantile(q=percentile)

# percentile of score of item
def percentile_score_of_item(df=df, item_id=itemname, percentile=p):
    return df[df['product_id'] == item_id]['score'].quantile(q=percentile)

# percentile of score of all users
def percentile_score_of_all_users(df=df, percentile=p):
    return df['score'].quantile(q=percentile)

# percentile of score of all items
def percentile_score_of_all_items(df=df, percentile=p):
    return df['score'].quantile(q=percentile)

# histogram of score of user
def hist_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].hist()

# histogram of score of item
def hist_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].hist()

# histogram of score of all users
def hist_score_of_all_users(df=df):
    return df['score'].hist()

# histogram of score of all items
def hist_score_of_all_items(df=df):
    return df['score'].hist()

# boxplot of score of user
def box_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].plot(kind='box')

# boxplot of score of item
def box_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].plot(kind='box')

# boxplot of score of all users
def box_score_of_all_users(df=df):
    return df['score'].plot(kind='box')

# boxplot of score of all items
def box_score_of_all_items(df=df):
    return df['score'].plot(kind='box')

# violinplot of score of user
def violin_score_of_user(df=df, user_id=username):
    return sns.violinplot(df[df['user_id'] == user_id]['score'])

# violinplot of score of item
def violin_score_of_item(df=df, item_id=itemname):
    return sns.violinplot(df[df['product_id'] == item_id]['score'])

# violinplot of score of all users
def violin_score_of_all_users(df=df):
    return sns.violinplot(df['score'])

# violinplot of score of all items
def violin_score_of_all_items(df=df):
    return sns.violinplot(df['score'])

# barplot of score of user
def bar_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].value_counts().plot(kind='bar')

# barplot of score of item
def bar_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].value_counts().plot(kind='bar')

# barplot of score of all users
def bar_score_of_all_users(df=df):
    return df['score'].value_counts().plot(kind='bar')

# barplot of score of all items
def bar_score_of_all_items(df=df):
    return df['score'].value_counts().plot(kind='bar')

# piechart of score of user
def pie_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].value_counts().plot(kind='pie')

# piechart of score of item
def pie_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].value_counts().plot(kind='pie')

# piechart of score of all users
def pie_score_of_all_users(df=df):
    return df['score'].value_counts().plot(kind='pie')

# piechart of score of all items
def pie_score_of_all_items(df=df):
    return df['score'].value_counts().plot(kind='pie')

# lineplot of score of user
def line_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id]['score'].value_counts().plot(kind='line')

# lineplot of score of item
def line_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id]['score'].value_counts().plot(kind='line')

# lineplot of score of all users
def line_score_of_all_users(df=df):
    return df['score'].value_counts().plot(kind='line')

# lineplot of score of all items
def line_score_of_all_items(df=df):
    return df['score'].value_counts().plot(kind='line')

# scatterplot of score of user
def scatter_score_of_user(df=df, user_id=username):
    return df[df['user_id'] == user_id].plot(x='product_id', y='score', kind='scatter')

# scatterplot of score of item
def scatter_score_of_item(df=df, item_id=itemname):
    return df[df['product_id'] == item_id].plot(x='user_id', y='score', kind='scatter')

# scatterplot of score of all users
def scatter_score_of_all_users(df=df):
    return df.plot(x='product_id', y='score', kind='scatter')

# scatterplot of score of all items
def scatter_score_of_all_items(df=df):
    return df.plot(x='user_id', y='score', kind='scatter')

# heatmap of score of user
def heat_score_of_user(df=df, user_id=username):
    return sns.heatmap(df[df['user_id'] == user_id].pivot_table(index='user_id', columns='product_id', values='score'))

# heatmap of score of item
def heat_score_of_item(df=df, item_id=itemname):
    return sns.heatmap(df[df['product_id'] == item_id].pivot_table(index='product_id', columns='user_id', values='score'))

# heatmap of score of all users
def heat_score_of_all_users(df=df):
    return sns.heatmap(df.pivot_table(index='user_id', columns='product_id', values='score'))

# heatmap of score of all items
def heat_score_of_all_items(df=df):
    return sns.heatmap(df.pivot_table(index='product_id', columns='user_id', values='score'))

# pairplot of score of user
def pair_score_of_user(df=df, user_id=username):
    return sns.pairplot(df[df['user_id'] == user_id])

# pairplot of score of item
def pair_score_of_item(df=df, item_id=itemname):
    return sns.pairplot(df[df['product_id'] == item_id])

# pairplot of score of all users
def pair_score_of_all_users(df=df):
    return sns.pairplot(df)

# pairplot of score of all items
def pair_score_of_all_items(df=df):
    return sns.pairplot(df)

# jointplot of score of user
def joint_score_of_user(df=df, user_id=username):
    return sns.jointplot(x='product_id', y='score', data=df[df['user_id'] == user_id])

# jointplot of score of item
def joint_score_of_item(df=df, item_id=itemname):
    return sns.jointplot(x='user_id', y='score', data=df[df['product_id'] == item_id])

# jointplot of score of all users
def joint_score_of_all_users(df=df):
    return sns.jointplot(x='product_id', y='score', data=df)

# jointplot of score of all items
def joint_score_of_all_items(df=df):
    return sns.jointplot(x='user_id', y='score', data=df)

# lmplot of score of user
def lm_score_of_user(df=df, user_id=username):
    return sns.lmplot(x='product_id', y='score', data=df[df['user_id'] == user_id])

# lmplot of score of item
def lm_score_of_item(df=df, item_id=itemname):
    return sns.lmplot(x='user_id', y='score', data=df[df['product_id'] == item_id])

# lmplot of score of all users
def lm_score_of_all_users(df=df):
    return sns.lmplot(x='product_id', y='score', data=df)

# lmplot of score of all items
def lm_score_of_all_items(df=df):
    return sns.lmplot(x='user_id', y='score', data=df)

# regplot of score of user
def reg_score_of_user(df=df, user_id=username):
    return sns.regplot(x='product_id', y='score', data=df[df['user_id'] == user_id])

# regplot of score of item
def reg_score_of_item(df=df, item_id=itemname):
    return sns.regplot(x='user_id', y='score', data=df[df['product_id'] == item_id])

# regplot of score of all users
def reg_score_of_all_users(df=df):
    return sns.regplot(x='product_id', y='score', data=df)

# regplot of score of all items
def reg_score_of_all_items(df=df):
    return sns.regplot(x='user_id', y='score', data=df)

# residplot of score of user
def resid_score_of_user(df=df, user_id=username):
    return sns.residplot(x='product_id', y='score', data=df[df['user_id'] == user_id])

# residplot of score of item
def resid_score_of_item(df=df, item_id=itemname):
    return sns.residplot(x='user_id', y='score', data=df[df['product_id'] == item_id])

# residplot of score of all users
def resid_score_of_all_users(df=df):
    return sns.residplot(x='product_id', y='score', data=df)

# residplot of score of all items
def resid_score_of_all_items(df=df):
    return sns.residplot(x='user_id', y='score', data=df)

# barplot of score of user by item
def bar_score_of_user_by_item(df=df, user_id=username):
    return df[df['user_id'] == user_id].groupby('product_id')['score'].mean().plot(kind='bar')

# barplot of score of item by user
def bar_score_of_item_by_user(df=df, item_id=itemname):
    return df[df['product_id'] == item_id].groupby('user_id')['score'].mean().plot(kind='bar')

# barplot of score of all users by item
def bar_score_of_all_users_by_item(df=df):
    return df.groupby('product_id')['score'].mean().plot(kind='bar')

# barplot of score of all items by user
def bar_score_of_all_items_by_user(df=df):
    return df.groupby('user_id')['score'].mean().plot(kind='bar')

# piechart of score of user by item
def pie_score_of_user_by_item(df=df, user_id=username):
    return df[df['user_id'] == user_id].groupby('product_id')['score'].mean().plot(kind='pie')

# piechart of score of item by user
def pie_score_of_item_by_user(df=df, item_id=itemname):
    return df[df['product_id'] == item_id].groupby('user_id')['score'].mean().plot(kind='pie')

# piechart of score of all users by item
def pie_score_of_all_users_by_item(df=df):
    return df.groupby('product_id')['score'].mean().plot(kind='pie')

# piechart of score of all items by user
def pie_score_of_all_items_by_user(df=df):
    return df.groupby('user_id')['score'].mean().plot(kind='pie')

# lineplot of score of user by item
def line_score_of_user_by_item(df=df, user_id=username):
    return df[df['user_id'] == user_id].groupby('product_id')['score'].mean().plot(kind='line')

# lineplot of score of item by user
def line_score_of_item_by_user(df=df, item_id=itemname):
    return df[df['product_id'] == item_id].groupby('user_id')['score'].mean().plot(kind='line')

# lineplot of score of all users by item
def line_score_of_all_users_by_item(df=df):
    return df.groupby('product_id')['score'].mean().plot(kind='line')

# lineplot of score of all items by user
def line_score_of_all_items_by_user(df=df):
    return df.groupby('user_id')['score'].mean().plot(kind='line')

# scatterplot of score of user by item
def scatter_score_of_user_by_item(df=df, user_id=username):
    return df[df['user_id'] == user_id].groupby('product_id')['score'].mean().plot(kind='scatter')

# scatterplot of score of item by user
def scatter_score_of_item_by_user(df=df, item_id=itemname):
    return df[df['product_id'] == item_id].groupby('user_id')['score'].mean().plot(kind='scatter')

# scatterplot of score of all users by item
def scatter_score_of_all_users_by_item(df=df):
    return df.groupby('product_id')['score'].mean().plot(kind='scatter')

# scatterplot of score of all items by user
def scatter_score_of_all_items_by_user(df=df):
    return df.groupby('user_id')['score'].mean().plot(kind='scatter')

# heatmap of score of user by item
def heat_score_of_user_by_item(df=df, user_id=username):
    return sns.heatmap(df[df['user_id'] == user_id].groupby('product_id')['score'].mean().unstack())

# heatmap of score of item by user
def heat_score_of_item_by_user(df=df, item_id=itemname):
    return sns.heatmap(df[df['product_id'] == item_id].groupby('user_id')['score'].mean().unstack())

# heatmap of score of all users by item
def heat_score_of_all_users_by_item(df=df):
    return sns.heatmap(df.groupby('product_id')['score'].mean().unstack())

# heatmap of score of all items by user
def heat_score_of_all_items_by_user(df=df):
    return sns.heatmap(df.groupby('user_id')['score'].mean().unstack())

# pairplot of score of user by item
def pair_score_of_user_by_item(df=df, user_id=username):
    return sns.pairplot(df[df['user_id'] == user_id].groupby('product_id')['score'].mean().reset_index())

# pairplot of score of item by user
def pair_score_of_item_by_user(df=df, item_id=itemname):
    return sns.pairplot(df[df['product_id'] == item_id].groupby('user_id')['score'].mean().reset_index())

# pairplot of score of all users by item
def pair_score_of_all_users_by_item(df=df):
    return sns.pairplot(df.groupby('product_id')['score'].mean().reset_index())

# pairplot of score of all items by user
def pair_score_of_all_items_by_user(df=df):
    return sns.pairplot(df.groupby('user_id')['score'].mean().reset_index())

# jointplot of score of user by item
def joint_score_of_user_by_item(df=df, user_id=username):
    return sns.jointplot(x='product_id', y='score', data=df[df['user_id'] == user_id].groupby('product_id')['score'].mean().reset_index())

# jointplot of score of item by user
def joint_score_of_item_by_user(df=df, item_id=itemname):
    return sns.jointplot(x='user_id', y='score', data=df[df['product_id'] == item_id].groupby('user_id')['score'].mean().reset_index())

# jointplot of score of all users by item
def joint_score_of_all_users_by_item(df=df):
    return sns.jointplot(x='product_id', y='score', data=df.groupby('product_id')['score'].mean().reset_index())

# jointplot of score of all items by user
def joint_score_of_all_items_by_user(df=df):
    return sns.jointplot(x='user_id', y='score', data=df.groupby('user_id')['score'].mean().reset_index())

# lmplot of score of user by item
def lm_score_of_user_by_item(df=df, user_id=username):
    return sns.lmplot(x='product_id', y='score', data=df[df['user_id'] == user_id].groupby('product_id')['score'].mean().reset_index())

# lmplot of score of item by user
def lm_score_of_item_by_user(df=df, item_id=itemname):
    return sns.lmplot(x='user_id', y='score', data=df[df['product_id'] == item_id].groupby('user_id')['score'].mean().reset_index())

# lmplot of score of all users by item
def lm_score_of_all_users_by_item(df=df):
    return sns.lmplot(x='product_id', y='score', data=df.groupby('product_id')['score'].mean().reset_index())

# lmplot of score of all items by user
def lm_score_of_all_items_by_user(df=df):
    return sns.lmplot(x='user_id', y='score', data=df.groupby('user_id')['score'].mean().reset_index())

# regplot of score of user by item
def reg_score_of_user_by_item(df=df, user_id=username):
    return sns.regplot(x='product_id', y='score', data=df[df['user_id'] == user_id].groupby('product_id')['score'].mean().reset_index())

# regplot of score of item by user
def reg_score_of_item_by_user(df=df, item_id=itemname):
    return sns.regplot(x='user_id', y='score', data=df[df['product_id'] == item_id].groupby('user_id')['score'].mean().reset_index())

# regplot of score of all users by item
def reg_score_of_all_users_by_item(df=df):
    return sns.regplot(x='product_id', y='score', data=df.groupby('product_id')['score'].mean().reset_index())

# regplot of score of all items by user
def reg_score_of_all_items_by_user(df=df):
    return sns.regplot(x='user_id', y='score', data=df.groupby('user_id')['score'].mean().reset_index())

# residplot of score of user by item
def resid_score_of_user_by_item(df=df, user_id=username):
    return sns.residplot(x='product_id', y='score', data=df[df['user_id'] == user_id].groupby('product_id')['score'].mean().reset_index())

# residplot of score of item by user
def resid_score_of_item_by_user(df=df, item_id=itemname):
    return sns.residplot(x='user_id', y='score', data=df[df['product_id'] == item_id].groupby('user_id')['score'].mean().reset_index())

# residplot of score of all users by item
def resid_score_of_all_users_by_item(df=df):
    return sns.residplot(x='product_id', y='score', data=df.groupby('product_id')['score'].mean().reset_index())

# residplot of score of all items by user
def resid_score_of_all_items_by_user(df=df):
    return sns.residplot(x='user_id', y='score', data=df.groupby('user_id')['score'].mean().reset_index())

# barplot of score of user by item with score less than or equal to threshold
def bar_score_of_user_by_item_with_score_less_than_or_equal_to_threshold(df=df, user_id=username, threshold=thres):
    return df[(df['user_id'] == user_id) & (df['score'] <= threshold)].groupby('product_id')['score'].mean().plot(kind='bar')

# barplot of score of item by user with score less than or equal to threshold
def bar_score_of_item_by_user_with_score_less_than_or_equal_to_threshold(df=df, item_id=itemname, threshold=thres):
    return df[(df['product_id'] == item_id) & (df['score'] <= threshold)].groupby('user_id')['score'].mean().plot(kind='bar')

# barplot of score of all users by item with score less than or equal to threshold
def bar_score_of_all_users_by_item_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold].groupby('product_id')['score'].mean().plot(kind='bar')

# barplot of score of all items by user with score less than or equal to threshold
def bar_score_of_all_items_by_user_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold].groupby('user_id')['score'].mean().plot(kind='bar')

# piechart of score of user by item with score less than or equal to threshold
def pie_score_of_user_by_item_with_score_less_than_or_equal_to_threshold(df=df, user_id=username, threshold=thres):
    return df[(df['user_id'] == user_id) & (df['score'] <= threshold)].groupby('product_id')['score'].mean().plot(kind='pie')

# piechart of score of item by user with score less than or equal to threshold
def pie_score_of_item_by_user_with_score_less_than_or_equal_to_threshold(df=df, item_id=itemname, threshold=thres):
    return df[(df['product_id'] == item_id) & (df['score'] <= threshold)].groupby('user_id')['score'].mean().plot(kind='pie')

# piechart of score of all users by item with score less than or equal to threshold
def pie_score_of_all_users_by_item_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold].groupby('product_id')['score'].mean().plot(kind='pie')

# piechart of score of all items by user with score less than or equal to threshold
def pie_score_of_all_items_by_user_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold].groupby('user_id')['score'].mean().plot(kind='pie')

# lineplot of score of user by item with score less than or equal to threshold
def line_score_of_user_by_item_with_score_less_than_or_equal_to_threshold(df=df, user_id=username, threshold=thres):
    return df[(df['user_id'] == user_id) & (df['score'] <= threshold)].groupby('product_id')['score'].mean().plot(kind='line')

# lineplot of score of item by user with score less than or equal to threshold
def line_score_of_item_by_user_with_score_less_than_or_equal_to_threshold(df=df, item_id=itemname, threshold=thres):
    return df[(df['product_id'] == item_id) & (df['score'] <= threshold)].groupby('user_id')['score'].mean().plot(kind='line')

# lineplot of score of all users by item with score less than or equal to threshold
def line_score_of_all_users_by_item_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold].groupby('product_id')['score'].mean().plot(kind='line')

# lineplot of score of all items by user with score less than or equal to threshold
def line_score_of_all_items_by_user_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold].groupby('user_id')['score'].mean().plot(kind='line')

# scatterplot of score of user by item with score less than or equal to threshold
def scatter_score_of_user_by_item_with_score_less_than_or_equal_to_threshold(df=df, user_id=username, threshold=thres):
    return df[(df['user_id'] == user_id) & (df['score'] <= threshold)].groupby('product_id')['score'].mean().plot(kind='scatter')

# scatterplot of score of item by user with score less than or equal to threshold
def scatter_score_of_item_by_user_with_score_less_than_or_equal_to_threshold(df=df, item_id=itemname, threshold=thres):
    return df[(df['product_id'] == item_id) & (df['score'] <= threshold)].groupby('user_id')['score'].mean().plot(kind='scatter')

# scatterplot of score of all users by item with score less than or equal to threshold
def scatter_score_of_all_users_by_item_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold].groupby('product_id')['score'].mean().plot(kind='scatter')

# scatterplot of score of all items by user with score less than or equal to threshold
def scatter_score_of_all_items_by_user_with_score_less_than_or_equal_to_threshold(df=df, threshold=thres):
    return df[df['score'] <= threshold].groupby('user_id')['score'].mean().plot(kind='scatter')